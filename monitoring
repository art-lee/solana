1. Мониторинг 2 (solana-mission-control)
ссылки:
https://github.com/Chainflow/solana-mission-control
https://chainflow.io/introducing-solana-mission-control/

2. Запускаем скрипт (grafana, prometheus, node_exporter)
curl -s -L https://raw.githubusercontent.com/Chainflow/solana-mission-control/main/scripts/install_script.sh | bash

3. Даем права
source ~/.bashrc

4. Экспортируем переменные (заменить значения). В случае добавления новых переменных отредактировать: 
https://github.com/art-lee/solana/blob/main/monitoring-solana-mission-control

cd $HOME
export RPC_ENDPOINT="https://api.testnet.solana.com" # Ex - export RPC_ENDPOINT="https://api.rpc.solana.com"
export NETWORK_RPC="http://localhost:8899" # Ex - export NETWORK_RPC="https://api.rpc.com"
export VALIDATOR_NAME="art-test"
export PUB_KEY="GZA4y8zY8SZe85tDGb8dhXqyuEvdkdatBF3ivoce2sir"
export VOTE_KEY="B1EmoN7nfcq4Mm8hEwyfLahbADUszieb2ctj6MisB21f"
export TELEGRAM_CHAT_ID=359
export TELEGRAM_BOT_TOKEN="1902345197:AAGgZJ-SVmjDXOCg7lAZ_iTsBj1H4fj0SJk"
export BALANCE_CHANGE_THRESHOLD="30.123"

5. Запускаем скрипт
curl -s -L https://raw.githubusercontent.com/art-lee/solana/main/monitoring-solana-mission-control | bash

5.1. Если solana-mission-control уже установлен
cd $HOME
echo "------ Updatig config fields with exported values -------"
sed -i '/balance_change_threshold =/c\balance_change_threshold = "'"$BALANCE_CHANGE_THRESHOLD"'"' ~/.solana-mc/config/config.toml
sed -i '/rpc_endpoint =/c\rpc_endpoint = "'"$RPC_ENDPOINT"'"' ~/.solana-mc/config/config.toml
sed -i '/network_rpc =/c\network_rpc = "'"$NETWORK_RPC"'"' ~/.solana-mc/config/config.toml
sed -i '/validator_name =/c\validator_name = "'"$VALIDATOR_NAME"'"'  ~/.solana-mc/config/config.toml
sed -i '/pub_key =/c\pub_key = "'"$PUB_KEY"'"'  ~/.solana-mc/config/config.toml
sed -i '/vote_key =/c\vote_key = "'"$VOTE_KEY"'"'  ~/.solana-mc/config/config.toml
if [ ! -z "${TELEGRAM_CHAT_ID}" ] && [ ! -z "${TELEGRAM_BOT_TOKEN}" ];
then 
    sed -i '/tg_chat_id =/c\tg_chat_id = '"$TELEGRAM_CHAT_ID"''  ~/.solana-mc/config/config.toml
    sed -i '/tg_bot_token =/c\tg_bot_token = "'"$TELEGRAM_BOT_TOKEN"'"'  ~/.solana-mc/config/config.toml
    sed -i '/enable_telegram_alerts =/c\enable_telegram_alerts = 'true''  ~/.solana-mc/config/config.toml
else
    echo "---- Telgram chat id and/or bot token are empty --------"
fi

5.2. Рестарт сервиса
sudo systemctl restart solana_mc.service

6.1. Проверка статусов
sudo systemctl status grafana-server
sudo systemctl status prometheus.service
sudo systemctl status node_exporter.service
sudo systemctl status solana_mc.service

6.2. Перезагрузка сервисов
systemctl daemon-reload
sudo systemctl restart grafana-server
sudo systemctl restart prometheus.service
sudo systemctl restart node_exporter.service
sudo systemctl restart solana_mc.service

6.3. Остановка сервисов
sudo systemctl stop grafana-server
sudo systemctl stop prometheus.service
sudo systemctl stop node_exporter.service
sudo systemctl stop solana_mc.service

7. Заходим в grafana
http://<your_ip>:3000
admin
admin

8. Добавить datasources
- Configuration and select Data Sources
- Click on Add data source and select Prometheus.
- Replace the URL with http://localhost:9090.
- Click on Save & Test .

9. Добавляем мониторы
- + затем Import
- 14738 - Validator monitoring metrics dashboard.
- 14739 - Summary dashboard.
- 13445 - System monitoring metrics dashboard.

===


Мониторинг metrics.stakeconomy.com

1. Пишем сервис
cat <<EOF | sudo tee /etc/apt/sources.list.d/influxdata.list
deb https://repos.influxdata.com/ubuntu bionic stable
EOF

2. Добавляем ключ
sudo curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -

3. Устанавливаем telegraf 
sudo apt-get update
sudo apt-get -y install telegraf jq bc

4. Добавляем пользователя и права ему
sudo adduser telegraf sudo
sudo adduser telegraf adm
sudo -- bash -c 'echo "telegraf ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers'

5. Делаем копию и удаляем
sudo cp /etc/telegraf/telegraf.conf /etc/telegraf/telegraf.conf.orig
sudo rm -rf /etc/telegraf/telegraf.conf

6. 
git clone https://github.com/stakeconomy/solanamonitoring/
cd solanamonitoring
chmod +x monitor.sh

7. Редактируем конфиг
nano /etc/telegraf/telegraf.conf

8. #Поменять hostname, путь и пользователя

# Global Agent Configuration
[agent]
  hostname = "art0055-testnet" # set this to a name you want to identify your node in the grafana dashboard
  flush_interval = "15s"
  interval = "15s"

# Input Plugins
[[inputs.cpu]]
    percpu = true
    totalcpu = true
    collect_cpu_time = false
    report_active = false
[[inputs.disk]]
    ignore_fs = ["devtmpfs", "devfs"]
[[inputs.io]]
[[inputs.mem]]
[[inputs.net]]
[[inputs.system]]
[[inputs.swap]]
[[inputs.netstat]]
[[inputs.processes]]
[[inputs.kernel]]
[[inputs.diskio]]

# Output Plugin InfluxDB
[[outputs.influxdb]]
  database = "metricsdb"
  urls = [ "http://metrics.stakeconomy.com:8086" ] # keep this to send all your metrics to the community dashboard otherwise use http://yourownmonitoringnode:8086
  username = "metrics" # keep both values if you use the community dashboard
  password = "password"

[[inputs.exec]]
  commands = ["sudo su -c /root/solana/solanamonitoring/monitor.sh -s /bin/bash root"] # change home and username to the useraccount your validator runs at
  interval = "5m"
  timeout = "1m"
  data_format = "influx"
  data_type = "integer"

9. Стартуем мониторинг
sudo systemctl enable --now telegraf
sudo systemctl is-enabled telegraf
systemctl restart telegraf
systemctl status telegraf


